diff --git a/src/cryptonote_core/cryptonote_core.cpp b/src/cryptonote_core/cryptonote_core.cpp
index 5aed708d5..9ea1ee641 100644
--- a/src/cryptonote_core/cryptonote_core.cpp
+++ b/src/cryptonote_core/cryptonote_core.cpp
@@ -166,8 +166,8 @@ namespace cryptonote
   };
   static const command_line::arg_descriptor<std::string> arg_check_updates = {
     "check-updates"
-  , "Check for new versions of monero: [disabled|notify|download|update]"
-  , "notify"
+  , "Check for new versions of haven: [disabled|notify|download|update]"
+  , "disabled"
   };
   static const command_line::arg_descriptor<bool> arg_fluffy_blocks  = {
     "fluffy-blocks"
@@ -486,8 +486,8 @@ namespace cryptonote
       if (boost::filesystem::exists(old_files / "blockchain.bin"))
       {
         MWARNING("Found old-style blockchain.bin in " << old_files.string());
-        MWARNING("Monero now uses a new format. You can either remove blockchain.bin to start syncing");
-        MWARNING("the blockchain anew, or use monero-blockchain-export and monero-blockchain-import to");
+        MWARNING("Haven now uses a new format. You can either remove blockchain.bin to start syncing");
+        MWARNING("the blockchain anew, or use haven-blockchain-export and haven-blockchain-import to");
         MWARNING("convert your existing blockchain.bin to the new format. See README.md for instructions.");
         return false;
       }
@@ -502,7 +502,14 @@ namespace cryptonote
       return false;
     }
 
+    if (m_nettype == STAGENET) {
+      folder /= std::to_string(STAGENET_VERSION);
+    } else if (m_nettype == TESTNET) {
+      folder /= std::to_string(TESTNET_VERSION);
+    }
+    
     folder /= db->get_db_name();
+
     MGINFO("Loading blockchain from folder " << folder.string() << " ...");
 
     const std::string filename = folder.string();
@@ -806,7 +813,7 @@ namespace cryptonote
     bad_semantics_txes_lock.unlock();
 
     uint8_t version = m_blockchain_storage.get_current_hard_fork_version();
-    const size_t max_tx_version = version == 1 ? 1 : 2;
+    const size_t max_tx_version = (version < HF_VERSION_OFFSHORE_FULL) ? 2 : CURRENT_TRANSACTION_VERSION;
     if (tx.version == 0 || tx.version > max_tx_version)
     {
       // v2 is the latest one we know
@@ -865,6 +872,79 @@ namespace cryptonote
     std::vector<const rct::rctSig*> rvv;
     for (size_t n = 0; n < tx_info.size(); ++n)
     {
+      // Get the pricing_record_height for any offshore TX
+      uint64_t pricing_record_height = tx_info[n].tx->pricing_record_height;
+    
+      // Set the offshore TX type flags
+      bool offshore = false;
+      bool onshore = false;
+      bool offshore_transfer = false;
+      bool xasset_transfer = false;
+      bool xasset_to_xusd = false;
+      bool xusd_to_xasset = false;
+      std::string strSource = "XHV";
+      std::string strDest = "XHV";
+      offshore::pricing_record pr;
+      std::string offshore_data(tx_info[n].tx->offshore_data.begin(), tx_info[n].tx->offshore_data.end());
+      if (pricing_record_height) {
+	
+        // New xAsset-style of offshore_data
+        int pos = offshore_data.find("-");
+        if (pos != std::string::npos) {
+          // Split the TX extra information into the 2 currencies
+          strSource = offshore_data.substr(0,pos);
+          strDest = offshore_data.substr(pos+1);
+          if (strSource == "XHV") {
+            offshore = true;
+          } else if (strDest == "XHV") {
+            onshore = true;
+          } else if ((strSource == "XUSD") && (strDest == "XUSD")) {
+            offshore_transfer = true;
+          } else if ((strSource != "XUSD") && (strDest != "XUSD")) {
+            xasset_transfer = true;
+          } else if (strSource == "XUSD") {
+            xusd_to_xasset = true;
+          } else {
+            xasset_to_xusd = true;
+          }
+        } else {
+          // Pre-xAsset format of offshore_data
+          // Set the bool flags
+          if ((offshore_data.at(0) > 'A') && (offshore_data.at(1) > 'A')) {
+            offshore_transfer = true;
+	    strSource = strDest = "XUSD";
+          } else if (offshore_data.at(0) > 'A') {
+            onshore = true;
+	    strSource = "XUSD";
+	    strDest = "XHV";
+          } else {
+            offshore = true;
+	    strSource = "XHV";
+	    strDest = "XUSD";
+          }
+        }
+	
+        // Get the correct pricing record here, given the height
+        std::vector<std::pair<cryptonote::blobdata,block>> blocks_pr;
+        bool b = m_blockchain_storage.get_blocks(pricing_record_height, 1, blocks_pr);
+        if (!b) {
+          MERROR_VER("Failed to obtain pricing record for block: " << pricing_record_height);
+          return false;
+        }
+        pr = blocks_pr[0].second.pricing_record;
+      }
+
+      for (const auto &out: tx_info[n].tx->vout) {
+        if (out.target.type() == typeid(txout_to_key)) {
+          LOG_PRINT_L1("txout_to_key target key = " << boost::get<txout_to_key>(out.target).key);
+        } else if (out.target.type() == typeid(txout_offshore)) {
+          LOG_PRINT_L1("txout_offshore target key = " << boost::get<txout_offshore>(out.target).key);
+        } else if (out.target.type() == typeid(txout_xasset)) {
+          std::string asset_type = boost::get<txout_xasset>(out.target).asset_type;
+          LOG_PRINT_L1("txout_xasset target key = " << boost::get<txout_xasset>(out.target).key << ", asset type = " << asset_type) ;
+        }
+      }
+
       if (!check_tx_semantic(*tx_info[n].tx, keeped_by_block))
       {
         set_semantics_failed(tx_info[n].tx_hash);
@@ -885,7 +965,7 @@ namespace cryptonote
           tx_info[n].result = false;
           break;
         case rct::RCTTypeSimple:
-          if (!rct::verRctSemanticsSimple(rv))
+          if (!rct::verRctSemanticsSimple(rv, pr, offshore, onshore, offshore_transfer, xasset_to_xusd, xusd_to_xasset, xasset_transfer, strSource, strDest))
           {
             MERROR_VER("rct signature semantics check failed");
             set_semantics_failed(tx_info[n].tx_hash);
@@ -906,6 +986,8 @@ namespace cryptonote
           break;
         case rct::RCTTypeBulletproof:
         case rct::RCTTypeBulletproof2:
+        case rct::RCTTypeCLSAG:
+        case rct::RCTTypeCLSAGN:
           if (!is_canonical_bulletproof_layout(rv.p.bulletproofs))
           {
             MERROR_VER("Bulletproof does not have canonical form");
@@ -924,18 +1006,80 @@ namespace cryptonote
           break;
       }
     }
-    if (!rvv.empty() && !rct::verRctSemanticsSimple(rvv))
+
+    if (!rvv.empty()/* && !rct::verRctSemanticsSimple(rvv, pr, offshore, onshore, offshore_to_offshore)*/)
     {
-      LOG_PRINT_L1("One transaction among this group has bad semantics, verifying one at a time");
+      LOG_PRINT_L1("Verifying one transaction at a time");
       ret = false;
-      const bool assumed_bad = rvv.size() == 1; // if there's only one tx, it must be the bad one
       for (size_t n = 0; n < tx_info.size(); ++n)
       {
+        // Get the pricing_record_height for any offshore TX
+        uint64_t pricing_record_height = tx_info[n].tx->pricing_record_height;
+          
+        // Set the offshore TX type flags
+        bool offshore = false;
+        bool onshore = false;
+        bool offshore_transfer = false;
+        bool xasset_transfer = false;
+        bool xasset_to_xusd = false;
+        bool xusd_to_xasset = false;
+        std::string strSource = "XHV";
+        std::string strDest = "XHV";
+        offshore::pricing_record pr;
+        std::string offshore_data(tx_info[n].tx->offshore_data.begin(), tx_info[n].tx->offshore_data.end());
+        if (pricing_record_height) {
+        
+          // New xAsset-style of offshore_data
+          int pos = offshore_data.find("-");
+	  if (pos != std::string::npos) {
+            // Split the TX extra information into the 2 currencies
+            strSource = offshore_data.substr(0,pos);
+            strDest = offshore_data.substr(pos+1);
+            if (strSource == "XHV") {
+              offshore = true;
+            } else if (strDest == "XHV") {
+              onshore = true;
+            } else if ((strSource == "XUSD") && (strDest == "XUSD")) {
+              offshore_transfer = true;
+            } else if ((strSource != "XUSD") && (strDest != "XUSD")) {
+              xasset_transfer = true;
+            } else if (strSource == "XUSD") {
+              xusd_to_xasset = true;
+            } else {
+              xasset_to_xusd = true;
+            }
+          } else {
+            // Pre-xAsset format of offshore_data
+            // Set the bool flags
+	    if ((offshore_data.at(0) > 'A') && (offshore_data.at(1) > 'A')) {
+	      offshore_transfer = true;
+	      strSource = strDest = "XUSD";
+	    } else if (offshore_data.at(0) > 'A') {
+	      onshore = true;
+	      strSource = "XUSD";
+	      strDest = "XHV";
+	    } else {
+	      offshore = true;
+	      strSource = "XHV";
+	      strDest = "XUSD";
+	    }
+          }
+	
+          // Get the correct pricing record here, given the height
+          std::vector<std::pair<cryptonote::blobdata,block>> blocks_pr;
+          bool b = m_blockchain_storage.get_blocks(pricing_record_height, 1, blocks_pr);
+          if (!b) {
+            MERROR_VER("Failed to obtain pricing record for block: " << pricing_record_height);
+            return false;
+          }
+          pr = blocks_pr[0].second.pricing_record;
+        }
+
         if (!tx_info[n].result)
           continue;
-        if (tx_info[n].tx->rct_signatures.type != rct::RCTTypeBulletproof && tx_info[n].tx->rct_signatures.type != rct::RCTTypeBulletproof2)
+        if (tx_info[n].tx->rct_signatures.type != rct::RCTTypeBulletproof && tx_info[n].tx->rct_signatures.type != rct::RCTTypeBulletproof2 && tx_info[n].tx->rct_signatures.type != rct::RCTTypeCLSAG && tx_info[n].tx->rct_signatures.type != rct::RCTTypeCLSAGN)
           continue;
-        if (assumed_bad || !rct::verRctSemanticsSimple(tx_info[n].tx->rct_signatures))
+        if (!rct::verRctSemanticsSimple(tx_info[n].tx->rct_signatures, pr, offshore, onshore, offshore_transfer, xasset_to_xusd, xusd_to_xasset, xasset_transfer, strSource, strDest))
         {
           set_semantics_failed(tx_info[n].tx_hash);
           tx_info[n].tvc.m_verifivation_failed = true;
@@ -943,7 +1087,6 @@ namespace cryptonote
         }
       }
     }
-
     return ret;
   }
   //-----------------------------------------------------------------------------------------------
@@ -1095,7 +1238,7 @@ namespace cryptonote
     {
       uint64_t amount_in = 0;
       get_inputs_money_amount(tx, amount_in);
-      uint64_t amount_out = get_outs_money_amount(tx);
+      uint64_t amount_out = get_outs_money_amount(tx)["XHV"];
 
       if(amount_in <= amount_out)
       {
@@ -1176,7 +1319,7 @@ namespace cryptonote
         [this, &emission_amount, &total_fee_amount](uint64_t, const crypto::hash& hash, const block& b){
       std::vector<transaction> txs;
       std::vector<crypto::hash> missed_txs;
-      uint64_t coinbase_amount = get_outs_money_amount(b.miner_tx);
+      uint64_t coinbase_amount = get_outs_money_amount(b.miner_tx)["XHV"];
       this->get_transactions(b.tx_hashes, txs, missed_txs);      
       uint64_t tx_fee_amount = 0;
       for(const auto& tx: txs)
@@ -1196,11 +1339,33 @@ namespace cryptonote
   bool core::check_tx_inputs_keyimages_diff(const transaction& tx) const
   {
     std::unordered_set<crypto::key_image> ki;
-    for(const auto& in: tx.vin)
-    {
-      CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, false);
-      if(!ki.insert(tokey_in.k_image).second)
-        return false;
+    if (tx.vin[0].type() == typeid(txin_to_key)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, false);
+	if(!ki.insert(tokey_in.k_image).second)
+	  return false;
+      }
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_offshore, tokey_in, false);
+	if(!ki.insert(tokey_in.k_image).second)
+	  return false;
+      }
+    }
+    else if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_onshore, tokey_in, false);
+	if(!ki.insert(tokey_in.k_image).second)
+	  return false;
+      }
+    }
+    else if (tx.vin[0].type() == typeid(txin_xasset)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_xasset, tokey_in, false);
+	if(!ki.insert(tokey_in.k_image).second)
+	  return false;
+      }
     }
     return true;
   }
@@ -1208,14 +1373,36 @@ namespace cryptonote
   bool core::check_tx_inputs_ring_members_diff(const transaction& tx) const
   {
     const uint8_t version = m_blockchain_storage.get_current_hard_fork_version();
-    if (version >= 6)
-    {
-      for(const auto& in: tx.vin)
-      {
-        CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, false);
-        for (size_t n = 1; n < tokey_in.key_offsets.size(); ++n)
-          if (tokey_in.key_offsets[n] == 0)
-            return false;
+    if (tx.vin[0].type() == typeid(txin_to_key)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, false);
+	for (size_t n = 1; n < tokey_in.key_offsets.size(); ++n)
+	  if (tokey_in.key_offsets[n] == 0)
+	    return false;
+      }
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_offshore, tokey_in, false);
+	for (size_t n = 1; n < tokey_in.key_offsets.size(); ++n)
+	  if (tokey_in.key_offsets[n] == 0)
+	    return false;
+      }
+    }
+    else if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_onshore, tokey_in, false);
+	for (size_t n = 1; n < tokey_in.key_offsets.size(); ++n)
+	  if (tokey_in.key_offsets[n] == 0)
+	    return false;
+      }
+    }
+    else if (tx.vin[0].type() == typeid(txin_xasset)) {
+      for(const auto& in: tx.vin) {
+	CHECKED_GET_SPECIFIC_VARIANT(in, const txin_xasset, tokey_in, false);
+	for (size_t n = 1; n < tokey_in.key_offsets.size(); ++n)
+	  if (tokey_in.key_offsets[n] == 0)
+	    return false;
       }
     }
     return true;
@@ -1224,11 +1411,37 @@ namespace cryptonote
   bool core::check_tx_inputs_keyimages_domain(const transaction& tx) const
   {
     std::unordered_set<crypto::key_image> ki;
-    for(const auto& in: tx.vin)
-    {
-      CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, false);
-      if (!(rct::scalarmultKey(rct::ki2rct(tokey_in.k_image), rct::curveOrder()) == rct::identity()))
-        return false;
+    if (tx.vin[0].type() == typeid(txin_to_key)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_to_key, tokey_in, false);
+	  if (!(rct::scalarmultKey(rct::ki2rct(tokey_in.k_image), rct::curveOrder()) == rct::identity()))
+	    return false;
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_offshore)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_offshore, tokey_in, false);
+	  if (!(rct::scalarmultKey(rct::ki2rct(tokey_in.k_image), rct::curveOrder()) == rct::identity()))
+	    return false;
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_onshore)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_onshore, tokey_in, false);
+	  if (!(rct::scalarmultKey(rct::ki2rct(tokey_in.k_image), rct::curveOrder()) == rct::identity()))
+	    return false;
+	}
+    }
+    else if (tx.vin[0].type() == typeid(txin_xasset)) {
+      for(const auto& in: tx.vin)
+	{
+	  CHECKED_GET_SPECIFIC_VARIANT(in, const txin_xasset, tokey_in, false);
+	  if (!(rct::scalarmultKey(rct::ki2rct(tokey_in.k_image), rct::curveOrder()) == rct::identity()))
+	    return false;
+	}
     }
     return true;
   }
@@ -1640,7 +1853,7 @@ namespace cryptonote
     {
       std::string main_message;
       if (m_offline)
-        main_message = "The daemon is running offline and will not attempt to sync to the Monero network.";
+        main_message = "The daemon is running offline and will not attempt to sync to the Haven network.";
       else
         main_message = "The daemon will start synchronizing with the network. This may take a long time to complete.";
       MGINFO_YELLOW(ENDL << "**********************************************************************" << ENDL
@@ -1687,7 +1900,7 @@ namespace cryptonote
   //-----------------------------------------------------------------------------------------------
   bool core::check_updates()
   {
-    static const char software[] = "monero";
+    static const char software[] = "haven";
 #ifdef BUILD_TAG
     static const char buildtag[] = BOOST_PP_STRINGIZE(BUILD_TAG);
     static const char subdir[] = "cli"; // because it can never be simple
@@ -1872,7 +2085,7 @@ namespace cryptonote
     const time_t now = time(NULL);
     const std::vector<time_t> timestamps = m_blockchain_storage.get_last_block_timestamps(max_blocks_checked);
 
-    static const unsigned int seconds[] = { 5400, 3600, 1800, 1200, 600 };
+    static const unsigned int seconds[] = { 5400, 1800, 600 };
     for (size_t n = 0; n < sizeof(seconds)/sizeof(seconds[0]); ++n)
     {
       unsigned int b = 0;
@@ -1882,8 +2095,8 @@ namespace cryptonote
       MDEBUG("blocks in the last " << seconds[n] / 60 << " minutes: " << b << " (probability " << p << ")");
       if (p < threshold)
       {
-        MWARNING("There were " << b << (b == max_blocks_checked ? " or more" : "") << " blocks in the last " << seconds[n] / 60 << " minutes, there might be large hash rate changes, or we might be partitioned, cut off from the Monero network or under attack, or your computer's time is off. Or it could be just sheer bad luck.");
-
+        MWARNING("There were " << b << (b == max_blocks_checked ? " or more" : "") << " blocks in the last " << seconds[n] / 60 << " minutes, there might be large hash rate changes, or we might be partitioned, cut off from the Haven network or under attack, or your computer's time is off. Or it could be just sheer bad luck.");
+        
         std::shared_ptr<tools::Notify> block_rate_notify = m_block_rate_notify;
         if (block_rate_notify)
         {
